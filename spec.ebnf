(*

[] = optional
{} = zero or more



TODO:
- auto tuples
- attr
    - define syntax
        - @name(args...)
        - //$ name args
- expression precedence
- literals
- leading comma and semicolon
- (maybe) remove ranges as expr, just allow them on switch and for
- named return types

*)

file = "package" ident ";" { item };

item = proc
     | type_def
     | var
     | const
     | extern
     | ( "import" ident string ";" ) 
     ;

proc = "proc" ident proc_sig block;

proc_sig = "(" [ proc_arg { "," proc_arg } ] ")" [proc_ret];
proc_arg = ident { "," ident } ":" type;

proc_ret = "(" type { "," type } ")" | type;

(*
type NewType []int;
type Alias = []int;
*)
type_def = "type" ident ["="] type ";";


var = "var" ident ( ":" type ["=" expr] | "=" expr ) ";";
(* expr must be present on consts *)
const = "const" ident [":" type] "=" expr ";";

extern = "extern" ( extern_v, extern_p, extern_blk );

extern_v = "var" ident ":" type ";";
extern_p = "proc" ident proc_sig ";";
extern_blk = "{" { extern_v | extern_p } "}";








type    = ident ["." ident] | proc_t | array_t | slice_t | ptr_t | type_blk;
proc_t  = "proc" proc_sig;
array_t = "[" expr "]" type;
slice_t = "["      "]" type;
ptr_t   = "*" type;

type_blk = "struct" "{" [ struct_field { ";" struct_field } ] "}"
         | "union"  "{" [ type         { "," type         } ] "}"
         | "enum"   "{" [ enum_key     { "," enum_key     } ] "}"
         ;
struct_field = ident { "," ident } ":" type;
enum_key  = ident [ "=" expr ];




label = ":" ident;
stmt = ";"
     | var
     | const
     | [label] ( block | for | if | switch )
     | "defer"    stmt (* allowed: block,for,if,switch,expr_s *)
     | "continue" ident  ";" (* label *)
     | "break"    ident  ";" (* label *)
     | "return"   expr   ";"
     |            expr_s ";"
     ;

expr_s = expr_s1 ( assign | call );
expr_s1 = ident { "." ident | "[" expr "]" | ".*" };
assign = { "," expr_s1 } { ("="|"+="|"-="|"*="|"/=") expr_list };

block = "{" { stmt } "}";
if = "if" expr block { "elif" expr block } [ "else" block ];
for = "for" ident [ "," ident ] "in" expr block;
loop = "loop" [expr] block;

switch = "switch" [expr] "{" {switch_case} "}";
switch_case = "case" [type | expr_list] ":" {stmt} ["falltrough" ";"];




(*

MAYBE FIXME

9 (???) ::  number, string, char, group, init, ident, typeid
8 (ltr) ::  ., call, slice, .*
8 (rtl) ::  -, &, not, cast
7 (ltr) ::  *, /, %
6 (ltr) ::  +, -
5 (ltr) ::  ==, !=, >, <, >=, <=
4 (ltr) ::  and
3 (ltr) ::  or
2 (ltr) ::  .., ..<, ?:

*)

expr = or "?" [expr] ":" expr;
or = and { "or" and };
and = cmp { "and" cmp };
cmp = add { ("=="|"!="|">"|"<"|">="|"<=") add };
add = mul { ("+"|"-") mul };
mul = unop { ("*"|"/"|"%") unop };
unop = ("-"|"&"|"cast" "(" type ")"|"not") unop | get;
get = lit { "." ident | call | slice | ".*" };

call = "(" [expr_list] ")";
slice = "[" ( expr [":" [expr] ] | ":" [expr] ) "]";

lit = number | string | char | "(" expr ")" |
    | "." ident (* untyped enum *)
    | ident ["." ident] [init]
    | "[" [expr] "]" type init
    | "typeid" "(" type ")"
    ;

init = initf|inits;
inits = "{{" expr_list "}}";
initf = "{" [ initf1 { "," initf1 } ] "}";
initf1 = ("[" expr "]" | ident) { "[" expr "]" | "." ident } "=" expr;


expr_list = expr { "," expr };
